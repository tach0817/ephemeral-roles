// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	GetLogLevel(ctx context.Context, in *GetLogLevelParameters, opts ...grpc.CallOption) (API_GetLogLevelClient, error)
	SetLogLevel(ctx context.Context, in *LogLevel, opts ...grpc.CallOption) (*SetLogLevelResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) GetLogLevel(ctx context.Context, in *GetLogLevelParameters, opts ...grpc.CallOption) (API_GetLogLevelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/api.API/GetLogLevel", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetLogLevelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetLogLevelClient interface {
	Recv() (*LogLevel, error)
	grpc.ClientStream
}

type aPIGetLogLevelClient struct {
	grpc.ClientStream
}

func (x *aPIGetLogLevelClient) Recv() (*LogLevel, error) {
	m := new(LogLevel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) SetLogLevel(ctx context.Context, in *LogLevel, opts ...grpc.CallOption) (*SetLogLevelResponse, error) {
	out := new(SetLogLevelResponse)
	err := c.cc.Invoke(ctx, "/api.API/SetLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	GetLogLevel(*GetLogLevelParameters, API_GetLogLevelServer) error
	SetLogLevel(context.Context, *LogLevel) (*SetLogLevelResponse, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) GetLogLevel(*GetLogLevelParameters, API_GetLogLevelServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogLevel not implemented")
}
func (*UnimplementedAPIServer) SetLogLevel(context.Context, *LogLevel) (*SetLogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}
func (*UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_GetLogLevel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLogLevelParameters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetLogLevel(m, &aPIGetLogLevelServer{stream})
}

type API_GetLogLevelServer interface {
	Send(*LogLevel) error
	grpc.ServerStream
}

type aPIGetLogLevelServer struct {
	grpc.ServerStream
}

func (x *aPIGetLogLevelServer) Send(m *LogLevel) error {
	return x.ServerStream.SendMsg(m)
}

func _API_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.API/SetLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetLogLevel(ctx, req.(*LogLevel))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLogLevel",
			Handler:    _API_SetLogLevel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogLevel",
			Handler:       _API_GetLogLevel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
